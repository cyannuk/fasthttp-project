// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC41c7144DecodeFasthttpProjectDomainModel(in *jlexer.Lexer, out *UserOrders) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(UserOrders, 0, 1)
			} else {
				*out = UserOrders{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 UserOrder
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC41c7144EncodeFasthttpProjectDomainModel(out *jwriter.Writer, in UserOrders) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v UserOrders) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC41c7144EncodeFasthttpProjectDomainModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserOrders) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC41c7144EncodeFasthttpProjectDomainModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserOrders) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC41c7144DecodeFasthttpProjectDomainModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserOrders) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC41c7144DecodeFasthttpProjectDomainModel(l, v)
}
func easyjsonC41c7144DecodeFasthttpProjectDomainModel1(in *jlexer.Lexer, out *UserOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "city":
			out.City = string(in.String())
		case "state":
			out.State = string(in.String())
		case "product_id":
			out.ProductID = int64(in.Int64())
		case "quantity":
			out.Quantity = int32(in.Int32())
		case "total":
			out.Total = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC41c7144EncodeFasthttpProjectDomainModel1(out *jwriter.Writer, in UserOrder) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	if in.ProductID != 0 {
		const prefix string = ",\"product_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProductID))
	}
	if in.Quantity != 0 {
		const prefix string = ",\"quantity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Quantity))
	}
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC41c7144EncodeFasthttpProjectDomainModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC41c7144EncodeFasthttpProjectDomainModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC41c7144DecodeFasthttpProjectDomainModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC41c7144DecodeFasthttpProjectDomainModel1(l, v)
}
